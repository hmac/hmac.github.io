// Generated by purs bundle 0.12.5
var PS = {};
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];              
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  var Data_Show = $PS["Data.Show"];                
  var showUnit = new Data_Show.Show(function (v) {
      return "unit";
  });
  exports["showUnit"] = showUnit;
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];                
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];               
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          var go = defer(dictLazy)(function (v) {
              return f(go);
          });
          return go;
      };
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];                
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Show = $PS["Data.Show"];                        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["showTuple"] = showTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["gets"] = gets;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];                
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Control_Category.identity(Control_Category.categoryFn));
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
  exports["rmap"] = rmap;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  };
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 8 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 46, column 45): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 82, column 41): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["note"] = note;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };          
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                      
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return function (s) {
          var v = f(Data_Unit.unit);
          return v(s);
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($111) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Functor = $PS["Data.Functor"];
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
          };
      };
  };
  exports["some"] = some;
  exports["many"] = many;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqUnit = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  }; 
  var pred = function (dict) {
      return dict.pred;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  }; 
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["BoundedEnum"] = BoundedEnum;
  exports["cardinality"] = cardinality;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["enumChar"] = enumChar;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];                      
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($80) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($80)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeDisj"] = newtypeDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($199) {
              return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($199));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($200) {
                  return !elem(dictFoldable)(dictEq)(x)($200);
              };
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldrWithIndex"] = foldrWithIndex;
  exports["foldlWithIndex"] = foldlWithIndex;
  exports["foldMapWithIndex"] = foldMapWithIndex;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];                                                       
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($202) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($202));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($203) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($203));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function ($210) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value))(Data_Foldable.foldl(foldableList)(function (acc) {
                  return function ($211) {
                      return Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc)(f($211));
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value))($210));
          };
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 133, column 22 - line 135, column 61): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 140, column 22 - line 142, column 52): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 155, column 33): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldable1List"] = unfoldable1List;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
          };
      };
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List (line 390, column 3 - line 390, column 27): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["some"] = some;
  exports["many"] = many;
  exports["head"] = head;
  exports["reverse"] = reverse;
  exports["filter"] = filter;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 1 - line 612, column 40): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
  var showMap = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (m) {
              return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
          });
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal (line 96, column 1 - line 96, column 39): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var asList = Control_Category.identity(Control_Category.categoryFn);
  var foldableWithIndexMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableMap;
  }, function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(function ($760) {
                  return Data_Tuple.uncurry(Data_Function.flip(f)($760));
              })(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  });
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 549, column 15 - line 551, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)(function ($763) {
                              return Data_Maybe.Just.create(Data_Maybe.maybe(v.value1)(f(v.value1))($763));
                          })(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  var semigroupMap = function (dictOrd) {
      return new Data_Semigroup.Semigroup(union(dictOrd));
  };
  var monoidMap = function (dictOrd) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMap(dictOrd);
      }, empty);
  };
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["pop"] = pop;
  exports["member"] = member;
  exports["alter"] = alter;
  exports["values"] = values;
  exports["union"] = union;
  exports["unionWith"] = unionWith;
  exports["showMap"] = showMap;
  exports["semigroupMap"] = semigroupMap;
  exports["monoidMap"] = monoidMap;
  exports["functorMap"] = functorMap;
  exports["foldableMap"] = foldableMap;
  exports["foldableWithIndexMap"] = foldableWithIndexMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];                        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var head = function (v) {
      return v.value0;
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["head"] = head;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];                
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v),
          tail: $foreign.drop(1)(v)
      });
  };                                                                                          
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["charAt"] = charAt;
  exports["uncons"] = uncons;
  exports["indexOf"] = indexOf;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = function ($53) {
      return Data_String_CodeUnits.singleton(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar))($53));
  };
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["singleton"] = singleton;
  exports["toCodePointArray"] = toCodePointArray;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["indexOf"] = indexOf;
  exports["take"] = take;
  exports["drop"] = drop;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["split"] = $foreign.split;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.String.Pattern"] = $PS["Data.String.Pattern"] || {};
  var exports = $PS["Data.String.Pattern"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Pattern = function (x) {
      return x;
  };              
  var newtypePattern = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Pattern);
  exports["Pattern"] = Pattern;
  exports["newtypePattern"] = newtypePattern;
})(PS);
(function(exports) {
  "use strict";

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.test = function (r) {
    return function (s) {
      var lastIndex = r.lastIndex;
      var result = r.test(s);
      r.lastIndex = lastIndex;
      return result;
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];                                              
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  exports["regex"] = regex;
  exports["renderFlags"] = renderFlags;
  exports["test"] = $foreign.test;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                        
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var unicode = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: true
  });
  var sticky = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: true,
      unicode: false
  });
  var semigroupRegexFlags = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new RegexFlags({
              global: v.value0.global || v1.value0.global,
              ignoreCase: v.value0.ignoreCase || v1.value0.ignoreCase,
              multiline: v.value0.multiline || v1.value0.multiline,
              sticky: v.value0.sticky || v1.value0.sticky,
              unicode: v.value0.unicode || v1.value0.unicode
          });
      };
  });
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  var multiline = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: true,
      sticky: false,
      unicode: false
  });
  var monoidRegexFlags = new Data_Monoid.Monoid(function () {
      return semigroupRegexFlags;
  }, noFlags);
  var ignoreCase = new RegexFlags({
      global: false,
      ignoreCase: true,
      multiline: false,
      sticky: false,
      unicode: false
  });
  var global = new RegexFlags({
      global: true,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  exports["RegexFlags"] = RegexFlags;
  exports["noFlags"] = noFlags;
  exports["global"] = global;
  exports["ignoreCase"] = ignoreCase;
  exports["multiline"] = multiline;
  exports["sticky"] = sticky;
  exports["unicode"] = unicode;
  exports["semigroupRegexFlags"] = semigroupRegexFlags;
  exports["monoidRegexFlags"] = monoidRegexFlags;
})(PS);
(function(exports) {
  "use strict";

  function _codePointAt (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          var codePointArray = Array.from(s);
          var isWithinRange  = i >= 0 && i < codePointArray.length;

          return isWithinRange ? just(codePointArray[i].codePointAt(0)) : nothing;
        };
      };
    };
  }

  function _codePointAtP (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.codePointAt(i)) : nothing;
        };
      };
    };
  }

  function endsWith (searchString) {
    return function (s) {
      return s.endsWith(searchString);
    };
  }

  function endsWithP (searchString) {
    return function (position) {
      return function (s) {
        return s.endsWith(searchString, position);
      };
    };
  }

  function escapeRegex (str) {
    return str.replace(/[.*+?^${}()|[\]\-\\]/g, "\\$&");
  }

  function fromCharArray (array) {
    return array.join("");
  }

  function includes (searchString) {
    return function (str) {
      return str.includes(searchString);
    };
  }

  function includesP (needle) {
    return function (position) {
      return function (haystack) {
        // For negative `position` values, we search from the beginning of the
        // string. This is in accordance with the native
        // `String.prototype.include` function.
        var pos = Math.max(0, position);

        // Converting to arrays takes care of any surrogate code points
        var needleA    = Array.from(needle);
        var haystackA  = Array.from(haystack).slice(pos);
        var needleALen = needleA.length;

        var maxIndex = haystackA.length + 1 - needleALen;
        var found    = false;
        var i;

        // Naive implementation, at some point we should check whether Boyer-Moore
        // or Knuth-Morris-Pratt are worthwhile
        for (i = 0; i < maxIndex; i++) {
          if (needleA.every(function (e, j) { return e === haystackA[i+j]; })) {
            found = true;
            break;
          }
        }

        return found;
      };
    };
  }

  function length (str) {
    return Array.from(str).length;
  }

  function lines (str) {
    // See http://www.unicode.org/reports/tr18/#RL1.6
    return str.split(/\r\n|[\n\v\f\r\u0085\u2028\u2029]/);
  }

  function normalize (str) {
    return str.normalize();
  }

  function _normalizeP (normalizationForm) {
    return function (str) {
      return str.normalize(normalizationForm);
    };
  }

  function _repeat (just) {
    return function (nothing) {
      return function (n) {
        return function (str) {
          var result;

          try {
            result = just(str.repeat(n));
          }
          catch (error) {
            result = nothing;
          }

          return result;
        };
      };
    };
  }

  function startsWith (searchString) {
    return function (s) {
      return s.startsWith(searchString);
    };
  }

  function startsWithP (searchString) {
    return function (position) {
      return function (s) {
        return s.startsWith(searchString, position);
      };
    };
  }

  function stripChars (chars) {
    return function (s) {
      return s.replace(RegExp("[" + escapeRegex(chars) + "]", "g"), "");
    };
  }

  function stripDiacritics (str) {
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  }

  function toCharArray (str) {
    return Array.from(str);
  }

  function unsafeCodePointAt (i) {
    return function (s) {
      var codePointArray = Array.from(s);
      var isWithinRange = i >= 0 && i < codePointArray.length;

      if (isWithinRange) {
        return codePointArray[i].codePointAt(0);
      }
      else {
        throw new Error("Data.String.Utils.unsafeCodePointAt: Invalid index");
      }
    };
  }

  function unsafeCodePointAtP (i) {
    return function (s) {
      if (i >= 0 && i < s.length) {
        return s.codePointAt(i);
      }
      else {
        throw new Error("Data.String.Utils.unsafeCodePointAt': Invalid index");
      }
    };
  }

  function unsafeRepeat (n) {
    return function (str) {
      try {
        return str.repeat(n);
      }
      catch (error) {
        throw new Error("Data.String.Utils.unsafeRepeat: Invalid count");
      }
    };
  }

  function words (s) {
    return s.split(/\s+/);
  }                                   
  exports.lines              = lines;
})(PS["Data.String.Utils"] = PS["Data.String.Utils"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.String.Utils"] = $PS["Data.String.Utils"] || {};
  var exports = $PS["Data.String.Utils"];
  var $foreign = $PS["Data.String.Utils"];
  exports["lines"] = $foreign.lines;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Expr"] = $PS["Expr"] || {};
  var exports = $PS["Expr"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Show = $PS["Data.Show"];                
  var ShowTypes = (function () {
      function ShowTypes() {

      };
      ShowTypes.value = new ShowTypes();
      return ShowTypes;
  })();
  var HideTypes = (function () {
      function HideTypes() {

      };
      HideTypes.value = new HideTypes();
      return HideTypes;
  })();
  var Raw = (function () {
      function Raw() {

      };
      Raw.value = new Raw();
      return Raw;
  })();
  var Fn = (function () {
      function Fn(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Fn.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Fn(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Fn;
  })();
  var Var = (function () {
      function Var(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Var.create = function (value0) {
          return function (value1) {
              return new Var(value0, value1);
          };
      };
      return Var;
  })();
  var App = (function () {
      function App(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      App.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new App(value0, value1, value2);
              };
          };
      };
      return App;
  })();
  var showExpr_ = function (dictShow) {
      return new Data_Show.Show(showExpr(dictShow)(ShowTypes.value));
  };
  var showExpr = function (dictShow) {
      return function (v) {
          return function (v1) {
              if (v instanceof Raw && v1 instanceof Var) {
                  return "(Var " + (Data_Show.show(dictShow)(v1.value0) + (" " + (v1.value1 + ")")));
              };
              if (v instanceof Raw && v1 instanceof App) {
                  return "(App " + (Data_Show.show(dictShow)(v1.value0) + (" " + (showExpr(dictShow)(Raw.value)(v1.value1) + (" " + (showExpr(dictShow)(Raw.value)(v1.value2) + " )")))));
              };
              if (v instanceof Raw && v1 instanceof Fn) {
                  return "(Fn " + (Data_Show.show(dictShow)(v1.value0) + (" " + (v1.value1 + (" " + (Data_Show.show(dictShow)(v1.value2) + (" " + (showExpr(dictShow)(Raw.value)(v1.value3) + " )")))))));
              };
              if (v instanceof HideTypes && v1 instanceof Var) {
                  return v1.value1;
              };
              if (v instanceof HideTypes && v1 instanceof Fn) {
                  return "(\u03bb" + (v1.value1 + (". " + (showExpr(dictShow)(HideTypes.value)(v1.value3) + ")")));
              };
              if (v instanceof HideTypes && v1 instanceof App) {
                  return "(" + (showExpr(dictShow)(HideTypes.value)(v1.value1) + (" " + (showExpr(dictShow)(HideTypes.value)(v1.value2) + ")")));
              };
              if (v instanceof ShowTypes && v1 instanceof Var) {
                  return v1.value1 + (" : " + Data_Show.show(dictShow)(v1.value0));
              };
              if (v instanceof ShowTypes && v1 instanceof Fn) {
                  return "(\u03bb" + (v1.value1 + (" : " + (Data_Show.show(dictShow)(v1.value2) + (". " + (Data_Show.show(showExpr_(dictShow))(v1.value3) + (")" + (" : " + Data_Show.show(dictShow)(v1.value0))))))));
              };
              if (v instanceof ShowTypes && v1 instanceof App) {
                  return "((" + (Data_Show.show(showExpr_(dictShow))(v1.value1) + (") (" + (Data_Show.show(showExpr_(dictShow))(v1.value2) + ("))" + (" : " + Data_Show.show(dictShow)(v1.value0))))));
              };
              throw new Error("Failed pattern match at Expr (line 19, column 1 - line 19, column 66): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var eqExpr = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Fn && y instanceof Fn) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && x.value1 === y.value1 && Data_Eq.eq(dictEq)(x.value2)(y.value2) && Data_Eq.eq(eqExpr(dictEq))(x.value3)(y.value3);
              };
              if (x instanceof Var && y instanceof Var) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && x.value1 === y.value1;
              };
              if (x instanceof App && y instanceof App) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(eqExpr(dictEq))(x.value1)(y.value1) && Data_Eq.eq(eqExpr(dictEq))(x.value2)(y.value2);
              };
              return false;
          };
      });
  };
  exports["Fn"] = Fn;
  exports["Var"] = Var;
  exports["App"] = App;
  exports["ShowTypes"] = ShowTypes;
  exports["HideTypes"] = HideTypes;
  exports["Raw"] = Raw;
  exports["showExpr"] = showExpr;
  exports["eqExpr"] = eqExpr;
  exports["showExpr_"] = showExpr_;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.readInt = function (radix) {
    return function (n) {
      return parseInt(n, radix);
    };
  };
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["readInt"] = $foreign.readInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Untyped"] = $PS["Untyped"] || {};
  var exports = $PS["Untyped"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Unit = $PS["Data.Unit"];
  var Expr = $PS["Expr"];                
  var $$var = Expr.Var.create(Data_Unit.unit);
  var fn = function (v) {
      return function (e) {
          return new Expr.Fn(Data_Unit.unit, v, Data_Unit.unit, e);
      };
  };
  var app = Expr.App.create(Data_Unit.unit);
  var substitute = function (v) {
      return function (a) {
          return function (b) {
              var go = function (v1) {
                  if (v1 instanceof Expr.Var) {
                      if (v1.value1 === v) {
                          return b;
                      };
                      if (Data_Boolean.otherwise) {
                          return $$var(v1.value1);
                      };
                  };
                  if (v1 instanceof Expr.Fn) {
                      if (v1.value1 === v) {
                          return fn(v1.value1)(v1.value3);
                      };
                      if (Data_Boolean.otherwise) {
                          return fn(v1.value1)(go(v1.value3));
                      };
                  };
                  if (v1 instanceof Expr.App) {
                      return app(go(v1.value1))(go(v1.value2));
                  };
                  throw new Error("Failed pattern match at Untyped (line 57, column 9 - line 58, column 41): " + [ v1.constructor.name ]);
              };
              return go(a);
          };
      };
  };
  var reduce = function (ctx) {
      return function (v) {
          if (v instanceof Expr.Var) {
              return Data_Maybe.fromMaybe($$var(v.value1))(Data_Map_Internal.lookup(Data_Ord.ordString)(v.value1)(ctx));
          };
          if (v instanceof Expr.Fn) {
              return fn(v.value1)(reduce(ctx)(v.value3));
          };
          if (v instanceof Expr.App && v.value1 instanceof Expr.Fn) {
              return substitute(v.value1.value1)(v.value1.value3)(v.value2);
          };
          if (v instanceof Expr.App && v.value1 instanceof Expr.Var) {
              var v2 = Data_Map_Internal.lookup(Data_Ord.ordString)(v.value1.value1)(ctx);
              if (v2 instanceof Data_Maybe.Just) {
                  return app(v2.value0)(v.value2);
              };
              if (v2 instanceof Data_Maybe.Nothing) {
                  return app($$var(v.value1.value1))(reduce(ctx)(v.value2));
              };
              throw new Error("Failed pattern match at Untyped (line 48, column 34 - line 50, column 71): " + [ v2.constructor.name ]);
          };
          if (v instanceof Expr.App) {
              return app(reduce(ctx)(v.value1))(reduce(ctx)(v.value2));
          };
          throw new Error("Failed pattern match at Untyped (line 44, column 1 - line 44, column 34): " + [ ctx.constructor.name, v.constructor.name ]);
      };
  };
  var reduceList = function (ctx) {
      return function (expr) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  var e$prime = reduce(ctx)(v.value0);
                  var $40 = Data_Eq.eq(Expr.eqExpr(Data_Eq.eqUnit))(e$prime)(v.value0);
                  if ($40) {
                      $tco_done = true;
                      return new Data_NonEmpty.NonEmpty(v.value0, v.value1);
                  };
                  $copy_v = new Data_NonEmpty.NonEmpty(e$prime, new Data_List_Types.Cons(v.value0, v.value1));
                  return;
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go(Data_NonEmpty.singleton(Data_List_Types.plusList)(expr));
      };
  };
  var nf = function (ctx) {
      return function (e) {
          return Data_NonEmpty.head(reduceList(ctx)(e));
      };
  };
  exports["nf"] = nf;
  exports["var"] = $$var;
  exports["fn"] = fn;
  exports["app"] = app;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Simple"] = $PS["Simple"] || {};
  var exports = $PS["Simple"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Expr = $PS["Expr"];
  var Untyped = $PS["Untyped"];                
  var Arr = (function () {
      function Arr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Arr.create = function (value0) {
          return function (value1) {
              return new Arr(value0, value1);
          };
      };
      return Arr;
  })();
  var T = (function () {
      function T() {

      };
      T.value = new T();
      return T;
  })();
  var C = (function () {
      function C(value0) {
          this.value0 = value0;
      };
      C.create = function (value0) {
          return new C(value0);
      };
      return C;
  })();
  var U = (function () {
      function U() {

      };
      U.value = new U();
      return U;
  })();
  var unify = function (v) {
      return function (v1) {
          if (v instanceof U && v1 instanceof U) {
              return true;
          };
          if (v instanceof T && v1 instanceof T) {
              return true;
          };
          if (v instanceof Arr && v1 instanceof Arr) {
              return unify(v.value0)(v1.value0) && unify(v.value1)(v1.value1);
          };
          return false;
      };
  };
  var stripTypes = function (v) {
      if (v instanceof Expr.Var) {
          return Untyped["var"](v.value1);
      };
      if (v instanceof Expr.Fn) {
          return Untyped.fn(v.value1)(stripTypes(v.value3));
      };
      if (v instanceof Expr.App) {
          return Untyped.app(stripTypes(v.value1))(stripTypes(v.value2));
      };
      throw new Error("Failed pattern match at Simple (line 123, column 1 - line 123, column 29): " + [ v.constructor.name ]);
  };
  var showType = new Data_Show.Show(function (v) {
      if (v instanceof T) {
          return "T";
      };
      if (v instanceof C) {
          return v.value0;
      };
      if (v instanceof Arr && v.value0 instanceof T) {
          return Data_Show.show(showType)(T.value) + (" -> " + Data_Show.show(showType)(v.value1));
      };
      if (v instanceof Arr) {
          return "(" + (Data_Show.show(showType)(v.value0) + (") -> " + Data_Show.show(showType)(v.value1)));
      };
      if (v instanceof U) {
          return "?";
      };
      throw new Error("Failed pattern match at Simple (line 18, column 1 - line 18, column 31): " + [ v.constructor.name ]);
  });
  var nf = function (ctx) {
      return function (expr) {
          return Untyped.nf(Data_Functor.map(Data_Map_Internal.functorMap)(stripTypes)(ctx))(stripTypes(expr));
      };
  };
  var getType = function (v) {
      if (v instanceof Expr.Fn) {
          return v.value0;
      };
      if (v instanceof Expr.Var) {
          return v.value0;
      };
      if (v instanceof Expr.App) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Simple (line 111, column 1 - line 111, column 24): " + [ v.constructor.name ]);
  };
  var typecheck = function (v) {
      if (v instanceof Expr.Var && v.value0 instanceof U) {
          return new Data_Either.Left(v);
      };
      if (v instanceof Expr.Fn && v.value0 instanceof U) {
          return new Data_Either.Left(v);
      };
      if (v instanceof Expr.App && v.value0 instanceof U) {
          return new Data_Either.Left(v);
      };
      if (v instanceof Expr.Var) {
          return new Data_Either.Right(Data_Unit.unit);
      };
      if (v instanceof Expr.Fn) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(typecheck(v.value3))(function () {
              var $67 = unify(v.value0)(new Arr(v.value2, getType(v.value3)));
              if ($67) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit);
              };
              return new Data_Either.Left(v);
          });
      };
      if (v instanceof Expr.App) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(typecheck(v.value1))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(typecheck(v.value2))(function () {
                  var v1 = getType(v.value1);
                  if (v1 instanceof Arr) {
                      var $73 = unify(v1.value0)(getType(v.value2)) && unify(v1.value1)(v.value0);
                      if ($73) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit);
                      };
                      return new Data_Either.Left(v);
                  };
                  return new Data_Either.Left(v.value1);
              });
          });
      };
      throw new Error("Failed pattern match at Simple (line 85, column 1 - line 85, column 38): " + [ v.constructor.name ]);
  };
  var eqType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Arr && y instanceof Arr) {
              return Data_Eq.eq(eqType)(x.value0)(y.value0) && Data_Eq.eq(eqType)(x.value1)(y.value1);
          };
          if (x instanceof T && y instanceof T) {
              return true;
          };
          if (x instanceof C && y instanceof C) {
              return x.value0 === y.value0;
          };
          if (x instanceof U && y instanceof U) {
              return true;
          };
          return false;
      };
  });
  var annotate = function (v) {
      return function (v1) {
          if (v1 instanceof Expr.Var && v1.value0 instanceof U) {
              return new Expr.Var(v, v1.value1);
          };
          if (v1 instanceof Expr.Fn && v1.value0 instanceof U) {
              return new Expr.Fn(v, v1.value1, v1.value2, v1.value3);
          };
          if (v1 instanceof Expr.App && v1.value0 instanceof U) {
              return new Expr.App(v, v1.value1, v1.value2);
          };
          return v1;
      };
  };
  var infer = function (types) {
      return function (ctx) {
          return function (v) {
              if (v instanceof Expr.App && v.value0 instanceof U) {
                  var b$prime = infer(types)(ctx)(v.value2);
                  var a$prime = infer(types)(ctx)(v.value1);
                  var type_ = (function () {
                      var v1 = getType(a$prime);
                      if (v1 instanceof Arr) {
                          var v2 = getType(b$prime);
                          if (v2 instanceof U) {
                              return U.value;
                          };
                          var $103 = Data_Eq.eq(eqType)(v1.value0)(v2);
                          if ($103) {
                              return v1.value1;
                          };
                          return U.value;
                      };
                      return U.value;
                  })();
                  return new Expr.App(type_, a$prime, b$prime);
              };
              if (v instanceof Expr.Fn && (v.value0 instanceof U && v.value2 instanceof C)) {
                  var v1 = Data_Map_Internal.lookup(Data_Ord.ordString)(v.value2.value0)(types);
                  if (v1 instanceof Data_Maybe.Just) {
                      return infer(types)(ctx)(new Expr.Fn(U.value, v.value1, v1.value0, v.value3));
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return new Expr.Fn(U.value, v.value1, new C(v.value2.value0), v.value3);
                  };
                  throw new Error("Failed pattern match at Simple (line 60, column 3 - line 62, column 35): " + [ v1.constructor.name ]);
              };
              if (v instanceof Expr.Fn && v.value0 instanceof U) {
                  var ctx$prime = Data_Map_Internal.insert(Data_Ord.ordString)(v.value1)(annotate(v.value2)(v.value3))(ctx);
                  var e$prime = infer(types)(ctx$prime)(v.value3);
                  var type_ = (function () {
                      var v1 = getType(e$prime);
                      if (v1 instanceof U) {
                          return U.value;
                      };
                      return new Arr(v.value2, v1);
                  })();
                  return new Expr.Fn(type_, v.value1, v.value2, e$prime);
              };
              if (v instanceof Expr.Var && v.value0 instanceof U) {
                  var type_ = (function () {
                      var v2 = Data_Map_Internal.lookup(Data_Ord.ordString)(v.value1)(ctx);
                      if (v2 instanceof Data_Maybe.Just) {
                          return getType(infer(types)(Data_Monoid.mempty(Data_Map_Internal.monoidMap(Data_Ord.ordString)))(v2.value0));
                      };
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return U.value;
                      };
                      throw new Error("Failed pattern match at Simple (line 76, column 15 - line 78, column 29): " + [ v2.constructor.name ]);
                  })();
                  return new Expr.Var(type_, v.value1);
              };
              return v;
          };
      };
  };
  exports["Arr"] = Arr;
  exports["T"] = T;
  exports["C"] = C;
  exports["U"] = U;
  exports["infer"] = infer;
  exports["typecheck"] = typecheck;
  exports["unify"] = unify;
  exports["getType"] = getType;
  exports["annotate"] = annotate;
  exports["stripTypes"] = stripTypes;
  exports["nf"] = nf;
  exports["eqType"] = eqType;
  exports["showType"] = showType;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Text.Parsing.Parser.Pos"] = $PS["Text.Parsing.Parser.Pos"] || {};
  var exports = $PS["Text.Parsing.Parser.Pos"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Pattern = $PS["Data.String.Pattern"];
  var updatePosString = function (pos$prime) {
      return function (str) {
          var updatePosChar = function (v) {
              return function (c) {
                  if (c === "\x0a") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x0d") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x09") {
                      return {
                          line: v.line,
                          column: (v.column + 8 | 0) - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.column - 1 | 0)(8) | 0
                      };
                  };
                  return {
                      line: v.line,
                      column: v.column + 1 | 0
                  };
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String_Common.split(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(""))(str));
      };
  };
  var showPosition = new Data_Show.Show(function (v) {
      return "(Position { line: " + (Data_Show.show(Data_Show.showInt)(v.line) + (", column: " + (Data_Show.show(Data_Show.showInt)(v.column) + " })")));
  });
  var initialPos = {
      line: 1,
      column: 1
  };
  exports["initialPos"] = initialPos;
  exports["updatePosString"] = updatePosString;
  exports["showPosition"] = showPosition;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Text.Parsing.Parser"] = $PS["Text.Parsing.Parser"] || {};
  var exports = $PS["Text.Parsing.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var ParseState = (function () {
      function ParseState(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ParseState.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ParseState(value0, value1, value2);
              };
          };
      };
      return ParseState;
  })();
  var ParseError = (function () {
      function ParseError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseError.create = function (value0) {
          return function (value1) {
              return new ParseError(value0, value1);
          };
      };
      return ParseError;
  })();
  var ParserT = function (x) {
      return x;
  };
  var showParseError = new Data_Show.Show(function (v) {
      return "(ParseError " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Text_Parsing_Parser_Pos.showPosition)(v.value1) + ")")));
  });
  var newtypeParserT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserT);
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
              return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p)))(initialState);
          };
      };
  };
  var runParser = function (s) {
      return function ($90) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(runParserT(Data_Identity.monadIdentity)(s)($90));
      };
  }; 
  var monadThrowParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var monadStateParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
  };
  var position = function (dictMonad) {
      return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function (v) {
          return v.value1;
      });
  };
  var lazyParserT = new Control_Lazy.Lazy(function (f) {
      return Control_Lazy.defer(Control_Monad_State_Trans.lazyStateT)(function ($93) {
          return Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(f($93)));
      });
  });                           
  var functorParserT = function (dictFunctor) {
      return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
  };
  var failWithPosition = function (dictMonad) {
      return function (message) {
          return function (pos) {
              return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, pos));
          };
      };
  };
  var bindParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var fail = function (dictMonad) {
      return function (message) {
          return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
      };
  };
  var applyParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var applicativeParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var altParserT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorParserT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, function (p1) {
          return function (p2) {
              return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p1)))(new ParseState(v.value0, v.value1, false)))(function (v1) {
                      if (v1.value0 instanceof Data_Either.Left && !v1.value1.value2) {
                          return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p2)))(v);
                      };
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
                  });
              })));
          };
      });
  };
  var plusParserT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altParserT(dictMonad);
      }, fail(dictMonad)("No alternative"));
  };
  var alternativeParserT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeParserT(dictMonad);
      }, function () {
          return plusParserT(dictMonad);
      });
  };
  exports["ParseError"] = ParseError;
  exports["ParseState"] = ParseState;
  exports["ParserT"] = ParserT;
  exports["runParser"] = runParser;
  exports["runParserT"] = runParserT;
  exports["position"] = position;
  exports["fail"] = fail;
  exports["failWithPosition"] = failWithPosition;
  exports["showParseError"] = showParseError;
  exports["newtypeParserT"] = newtypeParserT;
  exports["lazyParserT"] = lazyParserT;
  exports["functorParserT"] = functorParserT;
  exports["applyParserT"] = applyParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadStateParserT"] = monadStateParserT;
  exports["monadThrowParserT"] = monadThrowParserT;
  exports["altParserT"] = altParserT;
  exports["plusParserT"] = plusParserT;
  exports["alternativeParserT"] = alternativeParserT;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Text.Parsing.Parser.Combinators"] = $PS["Text.Parsing.Parser.Combinators"] || {};
  var exports = $PS["Text.Parsing.Parser.Combinators"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];                
  var withErrorMessage = function (dictMonad) {
      return function (p) {
          return function (msg) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
          };
      };
  };
  var tryRethrow = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Either.Left(new Text_Parsing_Parser.ParseError(v1.value0.value0.value0, v.value1)), new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  var $$try = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  var sepBy1 = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(function (v1) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(v, v1));
                  });
              });
          };
      };
  };
  var sepBy = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepBy1(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
          };
      };
  };
  var optional = function (dictMonad) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
      };
  };
  var option = function (dictMonad) {
      return function (a) {
          return function (p) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
          };
      };
  };
  var between = function (dictMonad) {
      return function (open) {
          return function (close) {
              return function (p) {
                  return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(open)(p))(close);
              };
          };
      };
  };
  exports["withErrorMessage"] = withErrorMessage;
  exports["between"] = between;
  exports["option"] = option;
  exports["optional"] = optional;
  exports["try"] = $$try;
  exports["tryRethrow"] = tryRethrow;
  exports["sepBy"] = sepBy;
  exports["sepBy1"] = sepBy1;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Text.Parsing.Parser.String"] = $PS["Text.Parsing.Parser.String"] || {};
  var exports = $PS["Text.Parsing.Parser.String"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Pattern = $PS["Data.String.Pattern"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var StringLike = function (drop, indexOf, $$null, uncons) {
      this.drop = drop;
      this.indexOf = indexOf;
      this["null"] = $$null;
      this.uncons = uncons;
  };
  var uncons = function (dict) {
      return dict.uncons;
  };
  var stringLikeString = new StringLike(Data_String_CodePoints.drop, Data_String_CodePoints.indexOf, Data_String_Common["null"], Data_String_CodeUnits.uncons);
  var $$null = function (dict) {
      return dict["null"];
  };
  var indexOf = function (dict) {
      return dict.indexOf;
  };
  var drop = function (dict) {
      return dict.drop;
  };
  var string = function (dictStringLike) {
      return function (dictMonad) {
          return function (str) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
                  return v.value0;
              }))(function (v) {
                  var v1 = indexOf(dictStringLike)(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(str))(v);
                  if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v2) {
                          return new Text_Parsing_Parser.ParseState(drop(dictStringLike)(Data_String_CodePoints.length(str))(v), Text_Parsing_Parser_Pos.updatePosString(v2.value1)(str), true);
                      }))(function () {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(str);
                      });
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Expected " + Data_Show.show(Data_Show.showString)(str));
              });
          };
      };
  };
  var anyChar = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (v) {
              var v1 = uncons(dictStringLike)(v);
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v2) {
                      return new Text_Parsing_Parser.ParseState(v1.value0.tail, Text_Parsing_Parser_Pos.updatePosString(v2.value1)(Data_String_CodeUnits.singleton(v1.value0.head)), true);
                  }))(function () {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0.head);
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 56, column 3 - line 63, column 16): " + [ v1.constructor.name ]);
          });
      };
  };
  var satisfy = function (dictStringLike) {
      return function (dictMonad) {
          return function (f) {
              return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictStringLike)(dictMonad))(function (v) {
                  var $61 = f(v);
                  if ($61) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String_CodeUnits.singleton(v) + "' did not satisfy predicate"));
              }));
          };
      };
  };
  var $$char = function (dictStringLike) {
      return function (dictMonad) {
          return function (c) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(function (v) {
                  return v === c;
              }))(Data_Show.show(Data_Show.showChar)(c));
          };
      };
  };
  var noneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("none of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  var oneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("one of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  var whiteSpace = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(satisfy(dictStringLike)(dictMonad)(function (c) {
              return c === "\x0a" || (c === "\x0d" || (c === " " || c === "\x09"));
          })))(function (v) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.fromCharArray(v));
          });
      };
  };
  var skipSpaces = function (dictStringLike) {
      return function (dictMonad) {
          return Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(whiteSpace(dictStringLike)(dictMonad));
      };
  };
  exports["drop"] = drop;
  exports["indexOf"] = indexOf;
  exports["uncons"] = uncons;
  exports["StringLike"] = StringLike;
  exports["string"] = string;
  exports["anyChar"] = anyChar;
  exports["satisfy"] = satisfy;
  exports["char"] = $$char;
  exports["whiteSpace"] = whiteSpace;
  exports["skipSpaces"] = skipSpaces;
  exports["oneOf"] = oneOf;
  exports["noneOf"] = noneOf;
  exports["stringLikeString"] = stringLikeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Parse"] = $PS["Parse"] || {};
  var exports = $PS["Parse"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Expr = $PS["Expr"];
  var Global = $PS["Global"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];                
  var TypeDef = (function () {
      function TypeDef(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeDef.create = function (value0) {
          return function (value1) {
              return new TypeDef(value0, value1);
          };
      };
      return TypeDef;
  })();
  var ExprDef = (function () {
      function ExprDef(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ExprDef.create = function (value0) {
          return function (value1) {
              return new ExprDef(value0, value1);
          };
      };
      return ExprDef;
  })();
  var parens = function (p) {
      return Text_Parsing_Parser_Combinators.between(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("("))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(")"))(p);
  };
  var newline = Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("\x0a");
  var skipComments = Text_Parsing_Parser_Combinators.optional(Data_Identity.monadIdentity)(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("--"))(function (v) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "\x0a" ])))(function (v1) {
          return Text_Parsing_Parser_Combinators.optional(Data_Identity.monadIdentity)(newline);
      });
  })));
  var digits = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ];
  var number = function (cfg) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($66) {
          return Global.readInt(10)(Data_String_CodeUnits.fromCharArray($66));
      })(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(digits))))(function (v) {
          var v1 = Data_Int.fromNumber(v);
          if (v1 instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(cfg.mkNat(v1.value0));
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("cannot parse number");
          };
          throw new Error("Failed pattern match at Parse (line 107, column 3 - line 111, column 1): " + [ v1.constructor.name ]);
      });
  };
  var alphas = [ "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ];
  var alphaNum = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(alphas))(function (v) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(alphas)(digits))))(function (v1) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_String_CodeUnits.fromCharArray(Data_Array.cons(v)(v1)));
      });
  });
  var ident = alphaNum;
  var annType = function (cfg) {
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(cfg.parseType)(ident);
  };
  var annotation = function (cfg) {
      return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
          return annExpr(cfg)(p);
      });
  };
  var annExpr$prime = function (cfg) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(parens(annotation(cfg)))(annType(cfg));
      };
  };
  var annExpr = function (cfg) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(annArrow(cfg)(p))(annExpr$prime(cfg)(p));
      };
  };
  var annArrow = function (cfg) {
      return function (p) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepBy1(Data_Identity.monadIdentity)(annExpr$prime(cfg)(p))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(" -> ")))(function (v) {
              var v1 = Data_List.reverse(v);
              if (v1 instanceof Data_List_Types.Nil) {
                  return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Expected at least one type application");
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Foldable.foldr(Data_List_Types.foldableList)(cfg.arrowType)(v1.value0)(Data_List.reverse(v1.value1)));
              };
              throw new Error("Failed pattern match at Parse (line 132, column 3 - line 134, column 69): " + [ v1.constructor.name ]);
          });
      };
  };
  var typedef = function (cfg) {
      return function (name) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":"))(function (v) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(annotation(cfg))(function (v1) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new TypeDef(name, v1));
                  });
              });
          });
      };
  };
  var $$var = function (cfg) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(ident)(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(cfg.nullType)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(" :"))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)))(annotation(cfg))))(function (v2) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Expr.Var(v2, v));
          });
      });
  };
  var func = function (cfg) {
      return function (p) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("\\"))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("\u03bb")))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(ident)(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(cfg.nullType)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":"))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)))(annotation(cfg))))(function (v3) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("."))(function (v4) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
                                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr$prime(cfg)(p))(function (v5) {
                                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Expr.Fn(cfg.nullType, v1, v3, v5));
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  var expr$prime = function (cfg) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(app(cfg)(p))(aexpr(cfg)(p));
      };
  };
  var expr = function (cfg) {
      return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
          return expr$prime(cfg)(p);
      });
  };
  var app = function (cfg) {
      return function (p) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(1))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepBy1(Data_Identity.monadIdentity)(aexpr(cfg)(p))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(" ")))(function (v1) {
                  if (v1 instanceof Data_List_Types.Cons) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Foldable.foldl(Data_List_Types.foldableList)(Expr.App.create(cfg.nullType))(v1.value0)(v1.value1));
                  };
                  if (v1 instanceof Data_List_Types.Nil) {
                      return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Expected at least one application");
                  };
                  throw new Error("Failed pattern match at Parse (line 155, column 3 - line 159, column 1): " + [ v1.constructor.name ]);
              });
          });
      };
  };
  var aexpr = function (cfg) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(parens(expr(cfg)))(number(cfg)))(func(cfg)(p)))($$var(cfg));
      };
  };
  var assign = function (cfg) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(ident)(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(" = "))(function (v1) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr(cfg))(function (v2) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(v, v2));
              });
          });
      });
  };
  var parseAssign = function (cfg) {
      return function (input) {
          return Text_Parsing_Parser.runParser(input)(assign(cfg));
      };
  };
  var assign_ = function (cfg) {
      return function (name) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("="))(function (v) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr(cfg))(function (v1) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new ExprDef(name, v1));
                  });
              });
          });
      };
  };
  var def = function (cfg) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(ident)(function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(typedef(cfg)(v))(assign_(cfg)(v));
          });
      });
  };
  var program = function (cfg) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(newline))(skipComments))(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(def(cfg))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(newline))(skipComments)));
  };
  var parseProgram = function (cfg) {
      return function (input) {
          return Control_Bind.bind(Data_Either.bindEither)(Text_Parsing_Parser.runParser(input)(program(cfg)))(function (v) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Foldable.foldl(Data_List_Types.foldableList)(function (v1) {
                  return function (d) {
                      if (d instanceof TypeDef) {
                          return new Data_Tuple.Tuple(v1.value0, Data_Map_Internal.insert(Data_Ord.ordString)(d.value0)(d.value1)(v1.value1));
                      };
                      if (d instanceof ExprDef) {
                          return new Data_Tuple.Tuple(Data_Map_Internal.insert(Data_Ord.ordString)(d.value0)(d.value1)(v1.value0), v1.value1);
                      };
                      throw new Error("Failed pattern match at Parse (line 46, column 32 - line 48, column 60): " + [ d.constructor.name ]);
                  };
              })(new Data_Tuple.Tuple(Data_Monoid.mempty(Data_Map_Internal.monoidMap(Data_Ord.ordString)), Data_Monoid.mempty(Data_Map_Internal.monoidMap(Data_Ord.ordString))))(v));
          });
      };
  };
  var parseExpr = function (cfg) {
      return function (input) {
          return Text_Parsing_Parser.runParser(input)(expr(cfg));
      };
  };
  exports["parseExpr"] = parseExpr;
  exports["parseAssign"] = parseAssign;
  exports["parseProgram"] = parseProgram;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Simple.Parse"] = $PS["Simple.Parse"] || {};
  var exports = $PS["Simple.Parse"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Expr = $PS["Expr"];
  var Parse = $PS["Parse"];
  var Simple = $PS["Simple"];                
  var zero = new Expr.Fn(Simple.U.value, "f", new Simple.Arr(Simple.T.value, Simple.T.value), new Expr.Fn(Simple.U.value, "x", Simple.T.value, new Expr.Var(Simple.U.value, "x")));
  var succ = function (dictPartial) {
      return function (v) {
          if (v instanceof Expr.Fn && v.value3 instanceof Expr.Fn) {
              return new Expr.Fn(Simple.U.value, "f", new Simple.Arr(Simple.T.value, Simple.T.value), new Expr.Fn(Simple.U.value, "x", Simple.T.value, new Expr.App(Simple.U.value, new Expr.Var(Simple.U.value, "f"), v.value3.value3)));
          };
          throw new Error("Failed pattern match at Simple.Parse (line 38, column 1 - line 38, column 32): " + [ v.constructor.name ]);
      };
  };
  var mkChurchNumeral = function (v) {
      if (v === 0) {
          return zero;
      };
      if (v < 0) {
          return zero;
      };
      if (Data_Boolean.otherwise) {
          return succ()(mkChurchNumeral(v - 1 | 0));
      };
      throw new Error("Failed pattern match at Simple.Parse (line 31, column 1 - line 31, column 31): " + [ v.constructor.name ]);
  };
  var simpleConfig = {
      mkNat: mkChurchNumeral,
      nullType: Simple.U.value,
      arrowType: Simple.Arr.create,
      parseType: function (t) {
          var $17 = t === "T";
          if ($17) {
              return Simple.T.value;
          };
          return new Simple.C(t);
      }
  };                                            
  var parseProgram = Parse.parseProgram(simpleConfig);
  exports["parseProgram"] = parseProgram;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["SystemF"] = $PS["SystemF"] || {};
  var exports = $PS["SystemF"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];                
  var TVar = (function () {
      function TVar(value0) {
          this.value0 = value0;
      };
      TVar.create = function (value0) {
          return new TVar(value0);
      };
      return TVar;
  })();
  var Arr = (function () {
      function Arr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Arr.create = function (value0) {
          return function (value1) {
              return new Arr(value0, value1);
          };
      };
      return Arr;
  })();
  var Pi = (function () {
      function Pi(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Pi.create = function (value0) {
          return function (value1) {
              return new Pi(value0, value1);
          };
      };
      return Pi;
  })();
  var T = (function () {
      function T() {

      };
      T.value = new T();
      return T;
  })();
  var U = (function () {
      function U() {

      };
      U.value = new U();
      return U;
  })();
  var Var = (function () {
      function Var(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Var.create = function (value0) {
          return function (value1) {
              return new Var(value0, value1);
          };
      };
      return Var;
  })();
  var Ty = (function () {
      function Ty(value0) {
          this.value0 = value0;
      };
      Ty.create = function (value0) {
          return new Ty(value0);
      };
      return Ty;
  })();
  var App = (function () {
      function App(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      App.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new App(value0, value1, value2);
              };
          };
      };
      return App;
  })();
  var Lam = (function () {
      function Lam(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Lam.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Lam(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Lam;
  })();
  var Forall = (function () {
      function Forall(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Forall.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Forall(value0, value1, value2);
              };
          };
      };
      return Forall;
  })();
  var unify = function (v) {
      return function (v1) {
          if (v instanceof U && v1 instanceof U) {
              return true;
          };
          if (v instanceof T && v1 instanceof T) {
              return true;
          };
          if (v instanceof Arr && v1 instanceof Arr) {
              return unify(v.value0)(v1.value0) && unify(v.value1)(v1.value1);
          };
          if (v instanceof TVar && v1 instanceof TVar) {
              return v.value0 === v1.value0;
          };
          return false;
      };
  };
  var typeOf = function (v) {
      if (v instanceof Var) {
          return v.value0;
      };
      if (v instanceof App) {
          return v.value0;
      };
      if (v instanceof Lam) {
          return v.value0;
      };
      if (v instanceof Forall) {
          return v.value0;
      };
      if (v instanceof Ty) {
          return v.value0;
      };
      throw new Error("Failed pattern match at SystemF (line 95, column 1 - line 95, column 23): " + [ v.constructor.name ]);
  };
  var typecheck = function (v) {
      if (v instanceof Ty) {
          return new Data_Either.Right(Data_Unit.unit);
      };
      if (v instanceof Var && v.value0 instanceof U) {
          return new Data_Either.Left(v);
      };
      if (v instanceof Lam && v.value0 instanceof U) {
          return new Data_Either.Left(v);
      };
      if (v instanceof Forall && v.value0 instanceof U) {
          return new Data_Either.Left(v);
      };
      if (v instanceof App && v.value0 instanceof U) {
          return new Data_Either.Left(v);
      };
      if (v instanceof Var) {
          return new Data_Either.Right(Data_Unit.unit);
      };
      if (v instanceof Lam) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(typecheck(v.value3))(function () {
              var $93 = unify(v.value0)(new Arr(v.value2, typeOf(v.value3)));
              if ($93) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit);
              };
              return new Data_Either.Left(v);
          });
      };
      if (v instanceof Forall) {
          return new Data_Either.Right(Data_Unit.unit);
      };
      if (v instanceof App) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(typecheck(v.value1))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(typecheck(v.value2))(function () {
                  var v1 = typeOf(v.value1);
                  if (v1 instanceof Arr) {
                      var $102 = unify(v1.value0)(typeOf(v.value2)) && unify(v1.value1)(v.value0);
                      if ($102) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit);
                      };
                      return new Data_Either.Left(v);
                  };
                  if (v1 instanceof Pi) {
                      return new Data_Either.Right(Data_Unit.unit);
                  };
                  return new Data_Either.Left(v.value1);
              });
          });
      };
      throw new Error("Failed pattern match at SystemF (line 165, column 1 - line 165, column 38): " + [ v.constructor.name ]);
  };
  var subVar = function (v) {
      return function (a) {
          return function (b) {
              var go = function (v1) {
                  if (v1 instanceof Var) {
                      if (v1.value1 === v) {
                          return b;
                      };
                      if (Data_Boolean.otherwise) {
                          return new Var(v1.value0, v1.value1);
                      };
                  };
                  if (v1 instanceof Lam) {
                      if (v1.value1 === v) {
                          return new Lam(v1.value0, v1.value1, v1.value2, v1.value3);
                      };
                      if (Data_Boolean.otherwise) {
                          return new Lam(v1.value0, v1.value1, v1.value2, go(v1.value3));
                      };
                  };
                  if (v1 instanceof App) {
                      return new App(v1.value0, go(v1.value1), go(v1.value2));
                  };
                  if (v1 instanceof Forall) {
                      return new Forall(v1.value0, v1.value1, go(v1.value2));
                  };
                  if (v1 instanceof Ty) {
                      return new Ty(v1.value0);
                  };
                  throw new Error("Failed pattern match at SystemF (line 133, column 9 - line 134, column 43): " + [ v1.constructor.name ]);
              };
              return go(a);
          };
      };
  };
  var showType = new Data_Show.Show(function (v) {
      if (v instanceof T) {
          return "T";
      };
      if (v instanceof U) {
          return "?";
      };
      if (v instanceof TVar) {
          return v.value0;
      };
      if (v instanceof Pi) {
          return "\u03a0" + (v.value0 + (". " + Data_Show.show(showType)(v.value1)));
      };
      if (v instanceof Arr && v.value0 instanceof T) {
          return Data_Show.show(showType)(T.value) + (" -> " + Data_Show.show(showType)(v.value1));
      };
      if (v instanceof Arr && v.value0 instanceof TVar) {
          return v.value0.value0 + (" -> " + Data_Show.show(showType)(v.value1));
      };
      if (v instanceof Arr) {
          return "(" + (Data_Show.show(showType)(v.value0) + (") -> " + Data_Show.show(showType)(v.value1)));
      };
      throw new Error("Failed pattern match at SystemF (line 29, column 1 - line 29, column 31): " + [ v.constructor.name ]);
  });
  var showExpr_ = new Data_Show.Show(function (v) {
      if (v instanceof Var) {
          return v.value1 + (" : " + Data_Show.show(showType)(v.value0));
      };
      if (v instanceof Ty) {
          return Data_Show.show(showType)(v.value0);
      };
      if (v instanceof Lam) {
          return "(\u03bb" + (v.value1 + (" : " + (Data_Show.show(showType)(v.value2) + (". " + (Data_Show.show(showExpr_)(v.value3) + (")" + (" : " + Data_Show.show(showType)(v.value0))))))));
      };
      if (v instanceof App) {
          return "((" + (Data_Show.show(showExpr_)(v.value1) + (") (" + (Data_Show.show(showExpr_)(v.value2) + ("))" + (" : " + Data_Show.show(showType)(v.value0))))));
      };
      if (v instanceof Forall) {
          return "(forall " + (v.value1 + (". " + (Data_Show.show(showExpr_)(v.value2) + (") : " + Data_Show.show(showType)(v.value0)))));
      };
      throw new Error("Failed pattern match at SystemF (line 46, column 1 - line 46, column 32): " + [ v.constructor.name ]);
  });
  var eqType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof TVar && y instanceof TVar) {
              return x.value0 === y.value0;
          };
          if (x instanceof Arr && y instanceof Arr) {
              return Data_Eq.eq(eqType)(x.value0)(y.value0) && Data_Eq.eq(eqType)(x.value1)(y.value1);
          };
          if (x instanceof Pi && y instanceof Pi) {
              return x.value0 === y.value0 && Data_Eq.eq(eqType)(x.value1)(y.value1);
          };
          if (x instanceof T && y instanceof T) {
              return true;
          };
          if (x instanceof U && y instanceof U) {
              return true;
          };
          return false;
      };
  });
  var eqExpr = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Var && y instanceof Var) {
              return Data_Eq.eq(eqType)(x.value0)(y.value0) && x.value1 === y.value1;
          };
          if (x instanceof Ty && y instanceof Ty) {
              return Data_Eq.eq(eqType)(x.value0)(y.value0);
          };
          if (x instanceof App && y instanceof App) {
              return Data_Eq.eq(eqType)(x.value0)(y.value0) && Data_Eq.eq(eqExpr)(x.value1)(y.value1) && Data_Eq.eq(eqExpr)(x.value2)(y.value2);
          };
          if (x instanceof Lam && y instanceof Lam) {
              return Data_Eq.eq(eqType)(x.value0)(y.value0) && x.value1 === y.value1 && Data_Eq.eq(eqType)(x.value2)(y.value2) && Data_Eq.eq(eqExpr)(x.value3)(y.value3);
          };
          if (x instanceof Forall && y instanceof Forall) {
              return Data_Eq.eq(eqType)(x.value0)(y.value0) && x.value1 === y.value1 && Data_Eq.eq(eqExpr)(x.value2)(y.value2);
          };
          return false;
      };
  });
  var checkType = function (ts) {
      return function (v) {
          if (v instanceof T) {
              return true;
          };
          if (v instanceof U) {
              return false;
          };
          if (v instanceof TVar) {
              return Data_Map_Internal.member(Data_Ord.ordString)(v.value0)(ts);
          };
          if (v instanceof Arr) {
              return checkType(ts)(v.value0) && checkType(ts)(v.value1);
          };
          if (v instanceof Pi) {
              return checkType(Data_Map_Internal.insert(Data_Ord.ordString)(v.value0)(new TVar(v.value0))(ts))(v.value1);
          };
          throw new Error("Failed pattern match at SystemF (line 88, column 1 - line 88, column 41): " + [ ts.constructor.name, v.constructor.name ]);
      };
  };
  var appType = function (s) {
      return function (t) {
          return function (v) {
              if (v instanceof T) {
                  return T.value;
              };
              if (v instanceof U) {
                  return U.value;
              };
              if (v instanceof TVar) {
                  if (v.value0 === s) {
                      return t;
                  };
                  if (Data_Boolean.otherwise) {
                      return new TVar(v.value0);
                  };
              };
              if (v instanceof Arr) {
                  return new Arr(appType(s)(t)(v.value0), appType(s)(t)(v.value1));
              };
              if (v instanceof Pi) {
                  if (v.value0 === s) {
                      return new Pi(v.value0, v.value1);
                  };
                  if (Data_Boolean.otherwise) {
                      return new Pi(v.value0, appType(s)(t)(v.value1));
                  };
              };
              throw new Error("Failed pattern match at SystemF (line 153, column 1 - line 153, column 42): " + [ s.constructor.name, t.constructor.name, v.constructor.name ]);
          };
      };
  };
  var infer = function (ts) {
      return function (es) {
          return function (v) {
              if (v instanceof Var && v.value0 instanceof U) {
                  return new Var(Data_Maybe.fromMaybe(U.value)(Data_Map_Internal.lookup(Data_Ord.ordString)(v.value1)(es)), v.value1);
              };
              if (v instanceof App && v.value0 instanceof U) {
                  var b$prime = infer(ts)(es)(v.value2);
                  var a$prime = infer(ts)(es)(v.value1);
                  var t = (function () {
                      var v1 = typeOf(a$prime);
                      if (v1 instanceof Arr) {
                          var $210 = Data_Eq.eq(eqType)(v1.value0)(typeOf(b$prime));
                          if ($210) {
                              return v1.value1;
                          };
                          return U.value;
                      };
                      if (v1 instanceof Pi) {
                          if (b$prime instanceof Ty) {
                              return appType(v1.value0)(b$prime.value0)(v1.value1);
                          };
                          return U.value;
                      };
                      return U.value;
                  })();
                  return new App(t, a$prime, b$prime);
              };
              if (v instanceof Lam && v.value0 instanceof U) {
                  var $220 = checkType(ts)(v.value2);
                  if ($220) {
                      var e$prime = infer(ts)(Data_Map_Internal.insert(Data_Ord.ordString)(v.value1)(v.value2)(es))(v.value3);
                      var t = new Arr(v.value2, typeOf(e$prime));
                      return new Lam(t, v.value1, v.value2, e$prime);
                  };
                  return new Lam(U.value, v.value1, v.value2, v.value3);
              };
              if (v instanceof Forall && v.value0 instanceof U) {
                  var e$prime = infer(Data_Map_Internal.insert(Data_Ord.ordString)(v.value1)(new TVar(v.value1))(ts))(es)(v.value2);
                  var t = new Pi(v.value1, typeOf(e$prime));
                  return new Forall(t, v.value1, e$prime);
              };
              return v;
          };
      };
  };
  var subType = function (s) {
      return function (t) {
          return function (v) {
              if (v instanceof Ty) {
                  return new Ty(appType(s)(t)(v.value0));
              };
              if (v instanceof Var) {
                  return new Var(appType(s)(t)(v.value0), v.value1);
              };
              if (v instanceof App) {
                  return new App(appType(s)(t)(v.value0), subType(s)(t)(v.value1), subType(s)(t)(v.value2));
              };
              if (v instanceof Lam) {
                  return new Lam(appType(s)(t)(v.value0), v.value1, appType(s)(t)(v.value2), subType(s)(t)(v.value3));
              };
              if (v instanceof Forall) {
                  if (s === v.value1) {
                      return new Forall(appType(s)(t)(v.value0), v.value1, v.value2);
                  };
                  if (Data_Boolean.otherwise) {
                      return new Forall(appType(s)(t)(v.value0), v.value1, subType(s)(t)(v.value2));
                  };
              };
              throw new Error("Failed pattern match at SystemF (line 144, column 1 - line 144, column 42): " + [ s.constructor.name, t.constructor.name, v.constructor.name ]);
          };
      };
  };
  var reduce = function (ctx) {
      return function (v) {
          if (v instanceof Ty) {
              return new Ty(v.value0);
          };
          if (v instanceof Var) {
              return Data_Maybe.fromMaybe(new Var(v.value0, v.value1))(Data_Map_Internal.lookup(Data_Ord.ordString)(v.value1)(ctx));
          };
          if (v instanceof App && v.value1 instanceof Lam) {
              return subVar(v.value1.value1)(v.value1.value3)(v.value2);
          };
          if (v instanceof App && (v.value1 instanceof Forall && v.value2 instanceof Ty)) {
              return subType(v.value1.value1)(v.value2.value0)(v.value1.value2);
          };
          if (v instanceof App) {
              return new App(v.value0, reduce(ctx)(v.value1), reduce(ctx)(v.value2));
          };
          if (v instanceof Lam) {
              return new Lam(v.value0, v.value1, v.value2, reduce(ctx)(v.value3));
          };
          if (v instanceof Forall) {
              return new Forall(v.value0, v.value1, reduce(ctx)(v.value2));
          };
          throw new Error("Failed pattern match at SystemF (line 119, column 1 - line 119, column 35): " + [ ctx.constructor.name, v.constructor.name ]);
      };
  };
  var reduceList = function (ctx) {
      return function (expr) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Cons) {
                      var e$prime = reduce(ctx)(v.value0);
                      var $274 = Data_Eq.eq(eqExpr)(e$prime)(v.value0);
                      if ($274) {
                          $tco_done = true;
                          return new Data_List_Types.Cons(v.value0, v.value1);
                      };
                      $copy_v = new Data_List_Types.Cons(e$prime, new Data_List_Types.Cons(v.value0, v.value1));
                      return;
                  };
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_List.singleton(expr);
                  };
                  throw new Error("Failed pattern match at SystemF (line 113, column 9 - line 116, column 59): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go(Data_List.singleton(expr));
      };
  };
  var nf = function (ctx) {
      return function (e) {
          return Data_Maybe.fromMaybe(e)(Data_List.head(reduceList(ctx)(e)));
      };
  };
  exports["TVar"] = TVar;
  exports["Arr"] = Arr;
  exports["Pi"] = Pi;
  exports["T"] = T;
  exports["U"] = U;
  exports["Var"] = Var;
  exports["Ty"] = Ty;
  exports["App"] = App;
  exports["Lam"] = Lam;
  exports["Forall"] = Forall;
  exports["infer"] = infer;
  exports["checkType"] = checkType;
  exports["typeOf"] = typeOf;
  exports["nf"] = nf;
  exports["reduceList"] = reduceList;
  exports["reduce"] = reduce;
  exports["subVar"] = subVar;
  exports["subType"] = subType;
  exports["appType"] = appType;
  exports["typecheck"] = typecheck;
  exports["unify"] = unify;
  exports["eqType"] = eqType;
  exports["showType"] = showType;
  exports["eqExpr"] = eqExpr;
  exports["showExpr_"] = showExpr_;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["SystemF.Parse"] = $PS["SystemF.Parse"] || {};
  var exports = $PS["SystemF.Parse"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Unit = $PS["Data.Unit"];
  var Global = $PS["Global"];
  var SystemF = $PS["SystemF"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];                
  var Def = (function () {
      function Def(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Def.create = function (value0) {
          return function (value1) {
              return new Def(value0, value1);
          };
      };
      return Def;
  })();
  var zero = SystemF.Forall.create(SystemF.U.value)("X")(SystemF.Lam.create(SystemF.U.value)("f")(new SystemF.Arr(new SystemF.TVar("X"), new SystemF.TVar("X")))(SystemF.Lam.create(SystemF.U.value)("x")(new SystemF.TVar("X"))(new SystemF.Var(SystemF.U.value, "x"))));
  var upperAlphas = [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ];
  var succ = function (v) {
      if (v instanceof SystemF.Forall && (v.value1 === "X" && (v.value2 instanceof SystemF.Lam && (v.value2.value1 === "f" && (v.value2.value3 instanceof SystemF.Lam && v.value2.value3.value1 === "x"))))) {
          return new SystemF.Forall(SystemF.U.value, "X", new SystemF.Lam(SystemF.U.value, "f", v.value2.value2, new SystemF.Lam(SystemF.U.value, "x", v.value2.value3.value2, new SystemF.App(SystemF.U.value, new SystemF.Var(SystemF.U.value, "f"), v.value2.value3.value3))));
      };
      return zero;
  };
  var parens = function (p) {
      return Text_Parsing_Parser_Combinators.between(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("("))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(")"))(p);
  };
  var newline = Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("\x0a");
  var mkNat = function (v) {
      if (v === 0) {
          return zero;
      };
      if (v < 0) {
          return mkNat(0);
      };
      if (Data_Boolean.otherwise) {
          return succ(mkNat(v - 1 | 0));
      };
      throw new Error("Failed pattern match at SystemF.Parse (line 79, column 1 - line 79, column 21): " + [ v.constructor.name ]);
  };
  var lowerAlphas = [ "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" ];
  var digits = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ];
  var number = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($73) {
      return Global.readInt(10)(Data_String_CodeUnits.fromCharArray($73));
  })(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(digits))))(function (v) {
      var v1 = Data_Int.fromNumber(v);
      if (v1 instanceof Data_Maybe.Just) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(mkNat(v1.value0));
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("cannot parse number");
      };
      throw new Error("Failed pattern match at SystemF.Parse (line 75, column 3 - line 79, column 1): " + [ v1.constructor.name ]);
  });
  var comment = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("--"))(function (v) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "\x0a" ])))(function (v1) {
          return newline;
      });
  });
  var skipComments = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(comment)(newline)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Unit.unit));
  var alphas = Data_Semigroup.append(Data_Semigroup.semigroupArray)(upperAlphas)(lowerAlphas);
  var lowercaseAlphaNum = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(lowerAlphas))(function (v) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(alphas)(digits))))(function (v1) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_String_CodeUnits.fromCharArray(Data_Array.cons(v)(v1)));
      });
  });
  var termName = lowercaseAlphaNum;
  var uppercaseAlphaNum = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(upperAlphas))(function (v) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(alphas)(digits))))(function (v1) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_String_CodeUnits.fromCharArray(Data_Array.cons(v)(v1)));
      });
  });
  var typeName = uppercaseAlphaNum;
  var annType = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(typeName)(function (v) {
      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))((function () {
          var $51 = v === "T";
          if ($51) {
              return SystemF.T.value;
          };
          return new SystemF.TVar(v);
      })());
  });
  var annotation = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
      return annExpr(p);
  });
  var annExpr$prime = function (p) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(parens(annotation))(annType);
  };
  var annExpr = function (p) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(annArrow(p))(annExpr$prime(p));
  };
  var annArrow = function (p) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepBy1(Data_Identity.monadIdentity)(annExpr$prime(p))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(" -> ")))(function (v) {
          var v1 = Data_List.reverse(v);
          if (v1 instanceof Data_List_Types.Nil) {
              return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Expected at least one type application");
          };
          if (v1 instanceof Data_List_Types.Cons) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Foldable.foldr(Data_List_Types.foldableList)(SystemF.Arr.create)(v1.value0)(Data_List.reverse(v1.value1)));
          };
          throw new Error("Failed pattern match at SystemF.Parse (line 127, column 3 - line 129, column 59): " + [ v1.constructor.name ]);
      });
  };
  var ty = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(SystemF.Ty.create)(annotation);
  var $$var = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(termName)(function (v) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(SystemF.U.value)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(" :"))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)))(annotation)))(function (v2) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new SystemF.Var(v2, v));
      });
  });
  var lam = function (p) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("\\"))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("\u03bb")))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(termName)(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(SystemF.U.value)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":"))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)))(annotation)))(function (v3) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("."))(function (v4) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr$prime(p))(function (v5) {
                                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new SystemF.Lam(SystemF.U.value, v1, v3, v5));
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var forall = function (p) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("forall"))(function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(typeName)(function (v1) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("."))(function (v2) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr$prime(p))(function (v3) {
                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new SystemF.Forall(SystemF.U.value, v1, v3));
                          });
                      });
                  });
              });
          });
      });
  };
  var expr$prime = function (p) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(app(p))(aexpr(p));
  };
  var expr = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
      return expr$prime(p);
  });
  var app = function (p) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepBy1(Data_Identity.monadIdentity)(aexpr(p))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(" ")))(function (v) {
          if (v instanceof Data_List_Types.Cons) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Foldable.foldl(Data_List_Types.foldableList)(SystemF.App.create(SystemF.U.value))(v.value0)(v.value1));
          };
          if (v instanceof Data_List_Types.Nil) {
              return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Expected at least one application");
          };
          throw new Error("Failed pattern match at SystemF.Parse (line 148, column 3 - line 152, column 1): " + [ v.constructor.name ]);
      });
  };
  var aexpr = function (p) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(ty))(parens(expr)))(number))(lam(p)))(forall(p)))($$var);
  };
  var def = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(termName)(function (v) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("="))(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.skipSpaces(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr)(function (v2) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Def(v, v2));
                  });
              });
          });
      });
  });
  var program = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(skipComments)(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(def)(skipComments));
  var parseProgram = function (input) {
      return Control_Bind.bind(Data_Either.bindEither)(Text_Parsing_Parser.runParser(input)(program))(function (v) {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Foldable.foldl(Data_List_Types.foldableList)(function (m) {
              return function (v1) {
                  return Data_Map_Internal.insert(Data_Ord.ordString)(v1.value0)(v1.value1)(m);
              };
          })(Data_Monoid.mempty(Data_Map_Internal.monoidMap(Data_Ord.ordString)))(v));
      });
  };
  exports["parseProgram"] = parseProgram;
  exports["Def"] = Def;
  exports["program"] = program;
  exports["skipComments"] = skipComments;
  exports["comment"] = comment;
  exports["def"] = def;
  exports["expr"] = expr;
  exports["aexpr"] = aexpr;
  exports["number"] = number;
  exports["mkNat"] = mkNat;
  exports["zero"] = zero;
  exports["succ"] = succ;
  exports["lam"] = lam;
  exports["forall"] = forall;
  exports["annotation"] = annotation;
  exports["annExpr"] = annExpr;
  exports["annArrow"] = annArrow;
  exports["annType"] = annType;
  exports["app"] = app;
  exports["ty"] = ty;
  exports["termName"] = termName;
  exports["typeName"] = typeName;
  exports["lowercaseAlphaNum"] = lowercaseAlphaNum;
  exports["uppercaseAlphaNum"] = uppercaseAlphaNum;
  exports["alphas"] = alphas;
  exports["upperAlphas"] = upperAlphas;
  exports["lowerAlphas"] = lowerAlphas;
  exports["digits"] = digits;
  exports["parens"] = parens;
  exports["newline"] = newline;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["SystemT"] = $PS["SystemT"] || {};
  var exports = $PS["SystemT"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Expr = $PS["Expr"];                
  var Arr = (function () {
      function Arr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Arr.create = function (value0) {
          return function (value1) {
              return new Arr(value0, value1);
          };
      };
      return Arr;
  })();
  var Nat = (function () {
      function Nat() {

      };
      Nat.value = new Nat();
      return Nat;
  })();
  var U = (function () {
      function U() {

      };
      U.value = new U();
      return U;
  })();
  var Rec = (function () {
      function Rec() {

      };
      Rec.value = new Rec();
      return Rec;
  })();
  var unify = function (v) {
      return function (v1) {
          if (v instanceof U && v1 instanceof U) {
              return true;
          };
          if (v instanceof Nat && v1 instanceof Nat) {
              return true;
          };
          if (v instanceof Arr && v1 instanceof Arr) {
              return unify(v.value0)(v1.value0) && unify(v.value1)(v1.value1);
          };
          return false;
      };
  };
  var substitute = function (v) {
      return function (a) {
          return function (b) {
              var go = function (v1) {
                  if (v1 instanceof Expr.Var) {
                      if (v1.value1 === v) {
                          return b;
                      };
                      if (Data_Boolean.otherwise) {
                          return new Expr.Var(v1.value0, v1.value1);
                      };
                  };
                  if (v1 instanceof Expr.Fn) {
                      if (v1.value1 === v) {
                          return new Expr.Fn(v1.value0, v1.value1, v1.value2, v1.value3);
                      };
                      if (Data_Boolean.otherwise) {
                          return new Expr.Fn(v1.value0, v1.value1, v1.value2, go(v1.value3));
                      };
                  };
                  if (v1 instanceof Expr.App) {
                      return new Expr.App(v1.value0, go(v1.value1), go(v1.value2));
                  };
                  throw new Error("Failed pattern match at SystemT (line 181, column 9 - line 182, column 43): " + [ v1.constructor.name ]);
              };
              return go(a);
          };
      };
  };
  var showAnn = new Data_Show.Show(function (v) {
      if (v instanceof Nat) {
          return "\u2115";
      };
      if (v instanceof Rec) {
          return "Rec";
      };
      if (v instanceof Arr && v.value0 instanceof Nat) {
          return "\u2115 -> " + Data_Show.show(showAnn)(v.value1);
      };
      if (v instanceof Arr) {
          return "(" + (Data_Show.show(showAnn)(v.value0) + (") -> " + Data_Show.show(showAnn)(v.value1)));
      };
      if (v instanceof U) {
          return "?";
      };
      throw new Error("Failed pattern match at SystemT (line 22, column 1 - line 22, column 29): " + [ v.constructor.name ]);
  });
  var getType = function (v) {
      if (v instanceof Expr.Fn) {
          return v.value0;
      };
      if (v instanceof Expr.Var) {
          return v.value0;
      };
      if (v instanceof Expr.App) {
          return v.value0;
      };
      throw new Error("Failed pattern match at SystemT (line 124, column 1 - line 124, column 23): " + [ v.constructor.name ]);
  };
  var typecheck = function (v) {
      if (v instanceof Expr.Var && v.value0 instanceof U) {
          return new Data_Either.Left(v);
      };
      if (v instanceof Expr.Fn && v.value0 instanceof U) {
          return new Data_Either.Left(v);
      };
      if (v instanceof Expr.App && v.value0 instanceof U) {
          return new Data_Either.Left(v);
      };
      if (v instanceof Expr.Var) {
          return new Data_Either.Right(Data_Unit.unit);
      };
      if (v instanceof Expr.Fn) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(typecheck(v.value3))(function () {
              var $69 = unify(v.value0)(new Arr(v.value2, getType(v.value3)));
              if ($69) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit);
              };
              return new Data_Either.Left(v);
          });
      };
      if (v instanceof Expr.App) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(typecheck(v.value1))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(typecheck(v.value2))(function () {
                  var v1 = getType(v.value1);
                  if (v1 instanceof Arr) {
                      var $75 = unify(v1.value0)(getType(v.value2)) && unify(v1.value1)(v.value0);
                      if ($75) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit);
                      };
                      return new Data_Either.Left(v);
                  };
                  return new Data_Either.Left(v.value1);
              });
          });
      };
      throw new Error("Failed pattern match at SystemT (line 189, column 1 - line 189, column 38): " + [ v.constructor.name ]);
  };
  var eqAnn = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Arr && y instanceof Arr) {
              return Data_Eq.eq(eqAnn)(x.value0)(y.value0) && Data_Eq.eq(eqAnn)(x.value1)(y.value1);
          };
          if (x instanceof Nat && y instanceof Nat) {
              return true;
          };
          if (x instanceof U && y instanceof U) {
              return true;
          };
          if (x instanceof Rec && y instanceof Rec) {
              return true;
          };
          return false;
      };
  });                                                                                                                                                                                                                                                                                                                                                                                                         
  var annotate = function (v) {
      return function (v1) {
          if (v1 instanceof Expr.Var && v1.value0 instanceof U) {
              return new Expr.Var(v, v1.value1);
          };
          if (v1 instanceof Expr.Fn && v1.value0 instanceof U) {
              return new Expr.Fn(v, v1.value1, v1.value2, v1.value3);
          };
          if (v1 instanceof Expr.App && v1.value0 instanceof U) {
              return new Expr.App(v, v1.value1, v1.value2);
          };
          return v1;
      };
  };
  var infer = function (ctx) {
      return function (v) {
          if (v instanceof Expr.Var && v.value1 === "Zero") {
              return new Expr.Var(Nat.value, "Zero");
          };
          if (v instanceof Expr.Var && v.value1 === "Succ") {
              return new Expr.Var(new Arr(Nat.value, Nat.value), "Succ");
          };
          var v1 = function (v2) {
              if (v instanceof Expr.App && (v.value1 instanceof Expr.App && (v.value1.value1 instanceof Expr.App && (v.value1.value1.value1 instanceof Expr.Var && (v.value1.value1.value1.value1 === "Rec" && Data_Boolean.otherwise))))) {
                  return v;
              };
              if (v instanceof Expr.Var && v.value1 === "Rec") {
                  return new Expr.Var(Rec.value, "Rec");
              };
              if (v instanceof Expr.App && v.value0 instanceof U) {
                  var b$prime = infer(ctx)(v.value2);
                  var a$prime = infer(ctx)(v.value1);
                  var type_ = (function () {
                      var v3 = getType(a$prime);
                      if (v3 instanceof Arr) {
                          var v4 = getType(b$prime);
                          if (v4 instanceof U) {
                              return U.value;
                          };
                          var $121 = Data_Eq.eq(eqAnn)(v3.value0)(v4);
                          if ($121) {
                              return v3.value1;
                          };
                          return U.value;
                      };
                      return U.value;
                  })();
                  return new Expr.App(type_, a$prime, b$prime);
              };
              if (v instanceof Expr.Fn && v.value0 instanceof U) {
                  var ctx$prime = Data_Map_Internal.insert(Data_Ord.ordString)(v.value1)(annotate(v.value2)(v.value3))(ctx);
                  var e$prime = infer(ctx$prime)(v.value3);
                  var type_ = (function () {
                      var v3 = getType(e$prime);
                      if (v3 instanceof U) {
                          return U.value;
                      };
                      return new Arr(v.value2, v3);
                  })();
                  return new Expr.Fn(type_, v.value1, v.value2, e$prime);
              };
              if (v instanceof Expr.Var && v.value0 instanceof U) {
                  var type_ = (function () {
                      var v4 = Data_Map_Internal.lookup(Data_Ord.ordString)(v.value1)(ctx);
                      if (v4 instanceof Data_Maybe.Just) {
                          return getType(v4.value0);
                      };
                      if (v4 instanceof Data_Maybe.Nothing) {
                          return U.value;
                      };
                      throw new Error("Failed pattern match at SystemT (line 117, column 15 - line 119, column 29): " + [ v4.constructor.name ]);
                  })();
                  return new Expr.Var(type_, v.value1);
              };
              return v;
          };
          if (v instanceof Expr.App && (v.value1 instanceof Expr.App && (v.value1.value1 instanceof Expr.App && (v.value1.value1.value1 instanceof Expr.Var && v.value1.value1.value1.value1 === "Rec")))) {
              var $138 = getType(infer(ctx)(v.value1.value1.value2));
              if ($138 instanceof Arr && ($138.value0 instanceof Nat && $138.value1 instanceof Arr)) {
                  var $139 = Data_Eq.eq(eqAnn)($138.value1.value0)($138.value1.value1);
                  if ($139) {
                      var $140 = Data_Eq.eq(eqAnn)(getType(infer(ctx)(v.value1.value2)))($138.value1.value0);
                      if ($140) {
                          var $141 = Data_Eq.eq(eqAnn)(getType(infer(ctx)(v.value2)))(Nat.value);
                          if ($141) {
                              var typeOfh = new Arr(Nat.value, new Arr($138.value1.value0, $138.value1.value0));
                              var typeOfrec = new Arr(typeOfh, new Arr($138.value1.value0, new Arr(Nat.value, $138.value1.value0)));
                              var n$prime = infer(ctx)(v.value2);
                              var h$prime = infer(ctx)(v.value1.value1.value2);
                              var a$prime = infer(ctx)(v.value1.value2);
                              return new Expr.App($138.value1.value0, new Expr.App(new Arr(Nat.value, $138.value1.value0), new Expr.App(new Arr($138.value1.value0, new Arr(Nat.value, $138.value1.value0)), new Expr.Var(typeOfrec, "Rec"), h$prime), a$prime), n$prime);
                          };
                          return v1(true);
                      };
                      return v1(true);
                  };
                  return v1(true);
              };
              return v1(true);
          };
          return v1(true);
      };
  };
  var reduce = function (ctx) {
      return function (v) {
          if (v instanceof Expr.App && (v.value1 instanceof Expr.App && (v.value1.value1 instanceof Expr.App && (v.value1.value1.value1 instanceof Expr.Var && v.value1.value1.value1.value1 === "Rec")))) {
              var v1 = reduce(ctx)(v.value2);
              if (v1 instanceof Expr.Var && v1.value1 === "Zero") {
                  return reduce(ctx)(v.value1.value2);
              };
              if (v1 instanceof Expr.App && (v1.value1 instanceof Expr.Var && v1.value1.value1 === "Succ")) {
                  var rec = new Expr.App(v.value1.value0, new Expr.App(v.value1.value0, new Expr.App(v.value1.value1.value0, new Expr.Var(v.value1.value1.value1.value0, "Rec"), v.value1.value1.value2), v.value1.value2), v1.value2);
                  return infer(ctx)(new Expr.App(U.value, new Expr.App(U.value, v.value1.value1.value2, v1.value2), rec));
              };
              return new Expr.App(v.value0, new Expr.App(v.value1.value0, new Expr.App(v.value1.value1.value0, new Expr.Var(v.value1.value1.value1.value0, "Rec"), v.value1.value1.value2), v.value1.value2), v1);
          };
          if (v instanceof Expr.Var) {
              return Data_Maybe.fromMaybe(new Expr.Var(v.value0, v.value1))(Data_Map_Internal.lookup(Data_Ord.ordString)(v.value1)(ctx));
          };
          if (v instanceof Expr.Fn) {
              return new Expr.Fn(v.value0, v.value1, v.value2, reduce(ctx)(v.value3));
          };
          if (v instanceof Expr.App && v.value1 instanceof Expr.Fn) {
              return substitute(v.value1.value1)(v.value1.value3)(v.value2);
          };
          if (v instanceof Expr.App && v.value1 instanceof Expr.Var) {
              var v2 = Data_Map_Internal.lookup(Data_Ord.ordString)(v.value1.value1)(ctx);
              if (v2 instanceof Data_Maybe.Just) {
                  return new Expr.App(v.value0, v2.value0, v.value2);
              };
              if (v2 instanceof Data_Maybe.Nothing) {
                  return new Expr.App(v.value0, new Expr.Var(v.value1.value0, v.value1.value1), reduce(ctx)(v.value2));
              };
              throw new Error("Failed pattern match at SystemT (line 172, column 35 - line 174, column 76): " + [ v2.constructor.name ]);
          };
          if (v instanceof Expr.App) {
              return new Expr.App(v.value0, reduce(ctx)(v.value1), reduce(ctx)(v.value2));
          };
          throw new Error("Failed pattern match at SystemT (line 160, column 1 - line 160, column 34): " + [ ctx.constructor.name, v.constructor.name ]);
      };
  };
  var reduceList = function (ctx) {
      return function (expr) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  var e$prime = reduce(ctx)(v.value0);
                  var $202 = Data_Eq.eq(Expr.eqExpr(eqAnn))(e$prime)(v.value0);
                  if ($202) {
                      $tco_done = true;
                      return new Data_NonEmpty.NonEmpty(v.value0, v.value1);
                  };
                  $copy_v = new Data_NonEmpty.NonEmpty(e$prime, new Data_List_Types.Cons(v.value0, v.value1));
                  return;
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go(Data_NonEmpty.singleton(Data_List_Types.plusList)(expr));
      };
  };
  var nf = function (ctx) {
      return function (e) {
          return Data_NonEmpty.head(reduceList(ctx)(e));
      };
  };
  exports["Arr"] = Arr;
  exports["Nat"] = Nat;
  exports["U"] = U;
  exports["Rec"] = Rec;
  exports["infer"] = infer;
  exports["getType"] = getType;
  exports["annotate"] = annotate;
  exports["nf"] = nf;
  exports["reduceList"] = reduceList;
  exports["reduce"] = reduce;
  exports["substitute"] = substitute;
  exports["typecheck"] = typecheck;
  exports["unify"] = unify;
  exports["eqAnn"] = eqAnn;
  exports["showAnn"] = showAnn;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["SystemT.Parse"] = $PS["SystemT.Parse"] || {};
  var exports = $PS["SystemT.Parse"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Function = $PS["Data.Function"];
  var Expr = $PS["Expr"];
  var Parse = $PS["Parse"];
  var SystemT = $PS["SystemT"];                
  var zero = new Expr.Var(SystemT.Nat.value, "Zero");
  var succ = new Expr.Var(new SystemT.Arr(SystemT.Nat.value, SystemT.Nat.value), "Succ");
  var mkChurchNumeral = function (v) {
      if (v === 0) {
          return zero;
      };
      if (v < 0) {
          return zero;
      };
      if (Data_Boolean.otherwise) {
          return new Expr.App(SystemT.Nat.value, succ, mkChurchNumeral(v - 1 | 0));
      };
      throw new Error("Failed pattern match at SystemT.Parse (line 24, column 1 - line 24, column 31): " + [ v.constructor.name ]);
  };
  var config = {
      mkNat: mkChurchNumeral,
      nullType: SystemT.U.value,
      arrowType: SystemT.Arr.create,
      parseType: Data_Function["const"](SystemT.Nat.value)
  };
  var parseAssign = Parse.parseAssign(config);
  var parseExpr = Parse.parseExpr(config);
  exports["parseExpr"] = parseExpr;
  exports["parseAssign"] = parseAssign;
  exports["config"] = config;
  exports["mkChurchNumeral"] = mkChurchNumeral;
  exports["zero"] = zero;
  exports["succ"] = succ;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Untyped.Parse"] = $PS["Untyped.Parse"] || {};
  var exports = $PS["Untyped.Parse"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Expr = $PS["Expr"];
  var Global = $PS["Global"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var Untyped = $PS["Untyped"];                
  var zero = Untyped.fn("f")(Untyped.fn("x")(Untyped["var"]("x")));
  var succ = function (dictPartial) {
      return function (v) {
          if (v instanceof Expr.Fn && v.value3 instanceof Expr.Fn) {
              return Untyped.fn("f")(Untyped.fn("x")(Untyped.app(Untyped["var"]("f"))(v.value3.value3)));
          };
          throw new Error("Failed pattern match at Untyped.Parse (line 69, column 1 - line 69, column 32): " + [ v.constructor.name ]);
      };
  };
  var parens = function (p) {
      return Text_Parsing_Parser_Combinators.between(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("("))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(")"))(p);
  };
  var mkChurchNumeral = function (v) {
      if (v === 0) {
          return zero;
      };
      if (v < 0) {
          return zero;
      };
      if (Data_Boolean.otherwise) {
          return succ()(mkChurchNumeral(v - 1 | 0));
      };
      throw new Error("Failed pattern match at Untyped.Parse (line 62, column 1 - line 62, column 31): " + [ v.constructor.name ]);
  };
  var digits = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ];
  var number = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($40) {
      return Global.readInt(10)(Data_String_CodeUnits.fromCharArray($40));
  })(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(digits))))(function (v) {
      var v1 = Data_Int.fromNumber(v);
      if (v1 instanceof Data_Maybe.Just) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(mkChurchNumeral(v1.value0));
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("cannot parse number");
      };
      throw new Error("Failed pattern match at Untyped.Parse (line 58, column 3 - line 62, column 1): " + [ v1.constructor.name ]);
  });
  var alphas = [ "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ];
  var ident = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.fromCharArray)(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(alphas)));
  var variable = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Untyped["var"])(ident);
  var func = function (p) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("\\"))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(function (v1) {
              return v1 !== ".";
          })))(function (v1) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(". "))(function (v3) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr$prime(p))(function (v4) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Untyped.fn(Data_String_CodeUnits.fromCharArray(v1))(v4));
                  });
              });
          });
      });
  };
  var expr$prime = function (p) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(application(p))(aexpr(p));
  };
  var expr = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
      return expr$prime(p);
  });
  var application = function (p) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(1))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepBy1(Data_Identity.monadIdentity)(aexpr(p))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(" ")))(function (v1) {
              if (v1 instanceof Data_List_Types.Cons) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Foldable.foldl(Data_List_Types.foldableList)(Untyped.app)(v1.value0)(v1.value1));
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Expected at least one application");
              };
              throw new Error("Failed pattern match at Untyped.Parse (line 90, column 3 - line 94, column 1): " + [ v1.constructor.name ]);
          });
      });
  };
  var aexpr = function (p) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(parens(expr))(number))(func(p)))(variable);
  };
  var assign = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(ident)(function (v) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(" = "))(function (v1) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expr)(function (v2) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(v, v2));
          });
      });
  });
  var parseAssign = function (input) {
      return Text_Parsing_Parser.runParser(input)(assign);
  };
  var parseExpr = function (input) {
      return Text_Parsing_Parser.runParser(input)(expr);
  };
  exports["parseExpr"] = parseExpr;
  exports["parseAssign"] = parseAssign;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Utils = $PS["Data.String.Utils"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Console = $PS["Effect.Console"];
  var Expr = $PS["Expr"];
  var Simple = $PS["Simple"];
  var Simple_Parse = $PS["Simple.Parse"];
  var SystemF = $PS["SystemF"];
  var SystemF_Parse = $PS["SystemF.Parse"];
  var SystemT = $PS["SystemT"];
  var SystemT_Parse = $PS["SystemT.Parse"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Untyped = $PS["Untyped"];
  var Untyped_Parse = $PS["Untyped.Parse"];                
  var runSystemF = function (input) {
      return Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn))(Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Show.show(Text_Parsing_Parser.showParseError))(SystemF_Parse.parseProgram(input)))(function (v) {
          var ctx = Data_FoldableWithIndex.foldrWithIndex(Data_Map_Internal.foldableWithIndexMap)(function (name) {
              return function (expr) {
                  return function (ctx1) {
                      return Data_Map_Internal.insert(Data_Ord.ordString)(name)(SystemF.infer(Data_Monoid.mempty(Data_Map_Internal.monoidMap(Data_Ord.ordString)))(Data_Functor.map(Data_Map_Internal.functorMap)(SystemF.typeOf)(ctx1))(expr))(ctx1);
                  };
              };
          })(Data_Monoid.mempty(Data_Map_Internal.monoidMap(Data_Ord.ordString)))(v);
          return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note("'main' not found")(Data_Map_Internal.lookup(Data_Ord.ordString)("main")(ctx)))(function (v1) {
              var exprTypes = Data_Functor.map(Data_Map_Internal.functorMap)(SystemF.typeOf)(ctx);
              var main$prime = SystemF.infer(Data_Monoid.mempty(Data_Map_Internal.monoidMap(Data_Ord.ordString)))(exprTypes)(v1);
              var v2 = SystemF.typecheck(main$prime);
              if (v2 instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Show.show(SystemF.showExpr_)(SystemF.nf(ctx)(main$prime)));
              };
              if (v2 instanceof Data_Either.Left) {
                  return Data_Either.Left.create("Could not determine type of " + Data_Show.show(SystemF.showExpr_)(v2.value0));
              };
              throw new Error("Failed pattern match at Main (line 74, column 3 - line 76, column 71): " + [ v2.constructor.name ]);
          });
      }));
  };
  var runSimple = function (input) {
      return Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn))(Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Show.show(Text_Parsing_Parser.showParseError))(Simple_Parse.parseProgram(input)))(function (v) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note("'main' not found")(Data_Map_Internal.lookup(Data_Ord.ordString)("main")(v.value0)))(function (v1) {
              var v2 = Simple.typecheck(Simple.infer(v.value1)(v.value0)(v1));
              if (v2 instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(Expr.showExpr(Data_Unit.showUnit)(Expr.HideTypes.value)(Simple.nf(v.value0)(v1)));
              };
              if (v2 instanceof Data_Either.Left) {
                  return Data_Either.Left.create("Could not determine type of " + (Data_Show.show(Expr.showExpr_(Simple.showType))(v2.value0) + ("\x0a\x0a" + (Data_Show.show(Data_Map_Internal.showMap(Data_Show.showString)(Expr.showExpr_(Simple.showType)))(v.value0) + ("\x0a\x0a" + Data_Show.show(Data_Map_Internal.showMap(Data_Show.showString)(Simple.showType))(v.value1))))));
              };
              throw new Error("Failed pattern match at Main (line 50, column 3 - line 52, column 117): " + [ v2.constructor.name ]);
          });
      }));
  };
  var mkContext = function (cs) {
      return Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_List_Types.foldableList)(cs);
  };
  var main = Effect_Console.log("app loaded");
  var isComment = function (str) {
      var v = Data_String_Regex.regex("^--.+")(Data_Monoid.mempty(Data_String_Regex_Flags.monoidRegexFlags));
      if (v instanceof Data_Either.Left) {
          return false;
      };
      if (v instanceof Data_Either.Right) {
          return Data_String_Regex.test(v.value0)(str);
      };
      throw new Error("Failed pattern match at Main (line 86, column 3 - line 88, column 26): " + [ v.constructor.name ]);
  };
  var dropComments = function (input) {
      return Data_List.filter(function (s) {
          return !Data_String_Common["null"](s) && !isComment(s);
      })(Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_String_Utils.lines(input)));
  };
  var runSystemT = function (input) {
      return Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn))((function () {
          var v = Data_List.reverse(dropComments(input));
          if (v instanceof Data_List_Types.Cons) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Show.show(Text_Parsing_Parser.showParseError))(Data_Traversable.traverse(Data_List_Types.traversableList)(Data_Either.applicativeEither)(SystemT_Parse.parseAssign)(v.value1)))(function (v1) {
                  var ctx = Data_Foldable.foldr(Data_List_Types.foldableList)(function (v2) {
                      return function (ctx1) {
                          return Data_Map_Internal.insert(Data_Ord.ordString)(v2.value0)(SystemT.infer(ctx1)(v2.value1))(ctx1);
                      };
                  })(Data_Monoid.mempty(Data_Map_Internal.monoidMap(Data_Ord.ordString)))(v1);
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.rmap(Data_Either.bifunctorEither)(SystemT.infer(ctx))(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Show.show(Text_Parsing_Parser.showParseError))(SystemT_Parse.parseExpr(v.value0))))(function (v2) {
                      var v3 = SystemT.typecheck(v2);
                      if (v3 instanceof Data_Either.Right) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Show.show(Expr.showExpr_(SystemT.showAnn))(SystemT.nf(ctx)(v2)));
                      };
                      if (v3 instanceof Data_Either.Left) {
                          return Data_Either.Left.create("Could not determine type of " + Data_Show.show(Expr.showExpr_(SystemT.showAnn))(v3.value0));
                      };
                      throw new Error("Failed pattern match at Main (line 62, column 11 - line 64, column 76): " + [ v3.constructor.name ]);
                  });
              });
          };
          if (v instanceof Data_List_Types.Nil) {
              return Control_Applicative.pure(Data_Either.applicativeEither)("Empty input");
          };
          throw new Error("Failed pattern match at Main (line 56, column 3 - line 67, column 1): " + [ v.constructor.name ]);
      })());
  };
  var runUntyped = function (input) {
      return Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn))((function () {
          var v = Data_List.reverse(dropComments(input));
          if (v instanceof Data_List_Types.Cons) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Show.show(Text_Parsing_Parser.showParseError))(Data_Traversable.traverse(Data_List_Types.traversableList)(Data_Either.applicativeEither)(Untyped_Parse.parseAssign)(v.value1)))(function (v1) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Show.show(Text_Parsing_Parser.showParseError))(Untyped_Parse.parseExpr(v.value0)))(function (v2) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(Expr.showExpr(Data_Unit.showUnit)(Expr.HideTypes.value)(Untyped.nf(mkContext(v1))(v2)));
                  });
              });
          };
          if (v instanceof Data_List_Types.Nil) {
              return Control_Applicative.pure(Data_Either.applicativeEither)("Empty input");
          };
          throw new Error("Failed pattern match at Main (line 39, column 3 - line 46, column 1): " + [ v.constructor.name ]);
      })());
  };
  exports["main"] = main;
  exports["runUntyped"] = runUntyped;
  exports["runSimple"] = runSimple;
  exports["runSystemT"] = runSystemT;
  exports["runSystemF"] = runSystemF;
  exports["dropComments"] = dropComments;
  exports["mkContext"] = mkContext;
  exports["isComment"] = isComment;
})(PS);
PS["Main"].main();